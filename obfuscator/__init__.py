"""Obfuscator module

Define an `Obfuscator` base class and subclasses that uses different obfuscation
 techniques.

"""
from typing import List

from obfuscator.techniques import (
    PassthroughTechnique,
    RemoveSpacesTechnique,
    ReplaceAdditionTechnique,
    ReplaceSingleAdditionTechnique,
    ReplaceXORTechnique,
    Technique,
)


class Obfuscator:
    """Base class for an obfuscator.

    The obfuscater is created passing a list of `Technique`, that can then be
    used to obfuscate code using the obfuscate method.

    Attributes:
        techniques (List[`Technique`]): List of `Technique` that implement an
        `apply(str)->str` method.

    """

    def __init__(self, techniques: List[Technique]):
        self.techniques = techniques

    def obfuscate(self, source_code: str) -> str:
        """Obfuscate code using the the techniques indicated at instanciation.

        Args:
            source_code (str): source code to obfuscate

        Returns:
            str: obfuscated source code
        """
        for technique in self.techniques:
            source_code = technique.apply(source_code)
        return source_code


class PassthroughObfuscator(Obfuscator):
    """Simple passthrough obfuscator: the obfuscated code will be the same as
    the input source code"""

    def __init__(self):
        super().__init__([PassthroughTechnique])


class HarderToRead(Obfuscator):
    """Uses simple techniques that won't change the generated bytecode/asm but
    will make source code harder to read.
    """

    def __init__(self):
        super().__init__([RemoveSpacesTechnique])


class ReplacementObfuscator(Obfuscator):
    """Uses simple substitution techniques. It will change generated
     bytecode/asm code.

    See: https://github.com/obfuscator-llvm/obfuscator/wiki/Instructions-Substitution
    """

    def __init__(self):
        super().__init__(
            [
                ReplaceAdditionTechnique,
                ReplaceSingleAdditionTechnique,
                ReplaceXORTechnique,
            ]
        )
